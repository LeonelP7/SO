{
	"Importar Librerías C": {
		"prefix": "inclibc",
		"body": [
			"#include <stdio.h>",
			"#include <stdlib.h>",
			"#include <string.h>",
			"#include <unistd.h>",
			"#include <sys/wait.h>",
			""
		],
		"description": "Inserta las librerías comunes para proyectos en C."
	},

	"Librerias para memoria compartida":{
		"prefix": "shmlibs",
		"body": [
			"#include <stdio.h>",
			"#include <stdlib.h>",
			"#include <string.h>",
			"#include <sys/wait.h>",
			"#include <unistd.h>",
			"#include <sys/ipc.h>",
			"#include <sys/shm.h>",
			"#include <signal.h>",
			"#include <sys/types.h>",
			"#include <sys/stat.h>"
		],
		"description": "Librerias para trabajar con shm"
	},
	"Matriz shm": {
    "prefix": "matrizShm",
    "body": [
      "void create_index(void **m, int rows, int cols, size_t sizeElement)",
      "{",
      "    int i;",
      "    size_t sizeRow = cols * sizeElement;",
      "    m[0] = m + rows;",
      "    for (i = 1; i < rows; i++)",
      "    {",
      "        m[i] = (m[i - 1] + sizeRow);",
      "    }",
      "}",
      "",
      "unsigned int sizeof_dm(int rows, int cols, size_t sizeElement)",
      "{",
      "    size_t size;",
      "    size = rows * sizeof(void *);        // indexSize",
      "    size += (cols * rows * sizeElement); // Data size",
      "    return size;",
      "}"
    ],
    "description": "Utilidad para crear una matriz en shm"
  },
  "Leer caracteres y guardarlos en memoria compartida": {
  "prefix": "leerChar",
  "body": [
    "void error(char *msg) {",
    "  perror(msg);",
    "  exit(-1);",
    "}",
    "",
    "int leerChar(char *filename, char **vec) {",
    "  int c, totalChar;",
    "  char caracter;",
    "  FILE *infile;",
    "",
    "  infile = fopen(filename, \"r\");",
    "  if (!infile) {",
    "    error(\"Error fopen\\n\");",
    "  }",
    "",
    "  fscanf(infile, \"%d\", &totalChar);",
    "  fgetc(infile);",
    "",
    "  idshm = shmget(IPC_PRIVATE, totalChar * sizeof(char), IPC_CREAT | 0600);",
    "  *vec = shmat(idshm, NULL, 0);",
    "  if (!*vec) {",
    "    error(\"error calloc\");",
    "  }",
    "",
    "  for (c = 0; c < totalChar; c++) {",
    "    fscanf(infile, \"%c\", &caracter);",
    "    (*vec)[c] = caracter;",
    "    // printf(\"%c\\n\", (*vec)[c]);",
    "  }",
    "",
    "  fclose(infile);",
    "  return c;",
    "}"
  ],
  "description": "Lee caracteres desde un archivo y los guarda en memoria compartida"
},

"Rellenar 2 Vectores con Memoria Compartida": {
    "prefix": "rellenarVect",
    "body": [
      "void rellenarVect(int** v1, int** v2, int* shmid1, int* shmid2, int* tam,",
      "                  char* filename) {",
      "  FILE* fp;",
      "  fp = fopen(filename, \"r\");",
      "  if (!fp) {",
      "    perror(\"Error fopen\\n\");",
      "  }",
      "  fscanf(fp, \"%d\", tam);",
      "",
      "  (*shmid1) = shmget(IPC_PRIVATE, (*tam) * sizeof(int), IPC_CREAT | 0600);",
      "  (*shmid2) = shmget(IPC_PRIVATE, (*tam) * sizeof(int), IPC_CREAT | 0600);",
      "  (*v1) = shmat((*shmid1), NULL, 0);",
      "  (*v2) = shmat((*shmid2), NULL, 0);",
      "",
      "  for (int i = 0; i < (*tam) * 2; i++) {",
      "    fscanf(fp, \"%d\", (i > (*tam) - 1) ? &(*v2)[i - (*tam)] : &(*v1)[i]);",
      "  }",
      "  for (int i = 0; i < (*tam); i++) {",
      "    printf(\"v1[%d] v2[%d]\\n\", (*v1)[i], (*v2)[i]);",
      "  }",
      "}"
    ],
    "description": "Lee dos vectores desde archivo y los almacena en memoria compartida"
  },

  "Cabeceras para hilos posix": {
    "prefix": "libspthreads",
    "body": [
      "#include <stdio.h>",
      "#include <unistd.h>",
      "#include <stdlib.h>",
      "#include <pthread.h>"
    ],
    "description": "Librerias basicas para trabajar con hilos"
  }
}